<?php
/**
 * WhatsappMessageInteractiveActionSection
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * YCloud API
 *
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YCloud\Client\Model;

use \ArrayAccess;
use \YCloud\Client\ObjectSerializer;

/**
 * WhatsappMessageInteractiveActionSection Class Doc Comment
 *
 * @category Class
 * @description WhatsApp Message Interactive Section Object.
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WhatsappMessageInteractiveActionSection implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WhatsappMessageInteractiveActionSection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'title' => 'string',
        'rows' => '\YCloud\Client\Model\WhatsappMessageInteractiveActionSectionRow[]',
        'product_items' => '\YCloud\Client\Model\WhatsappMessageInteractiveActionSectionProductItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'title' => null,
        'rows' => null,
        'product_items' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'rows' => 'rows',
        'product_items' => 'product_items'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'rows' => 'setRows',
        'product_items' => 'setProductItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'rows' => 'getRows',
        'product_items' => 'getProductItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['title'] = $data['title'] ?? null;
        $this->container['rows'] = $data['rows'] ?? null;
        $this->container['product_items'] = $data['product_items'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 24)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['rows']) && (count($this->container['rows']) > 10)) {
            $invalidProperties[] = "invalid value for 'rows', number of items must be less than or equal to 10.";
        }

        if (!is_null($this->container['product_items']) && (count($this->container['product_items']) > 30)) {
            $invalidProperties[] = "invalid value for 'product_items', number of items must be less than or equal to 30.";
        }

        if (!is_null($this->container['product_items']) && (count($this->container['product_items']) < 1)) {
            $invalidProperties[] = "invalid value for 'product_items', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title **Required if the message has more than one section.** Title of the section. Maximum length: 24 characters.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (!is_null($title) && (mb_strlen($title) > 24)) {
            throw new \InvalidArgumentException('invalid length for $title when calling WhatsappMessageInteractiveActionSection., must be smaller than or equal to 24.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets rows
     *
     * @return \YCloud\Client\Model\WhatsappMessageInteractiveActionSectionRow[]|null
     */
    public function getRows()
    {
        return $this->container['rows'];
    }

    /**
     * Sets rows
     *
     * @param \YCloud\Client\Model\WhatsappMessageInteractiveActionSectionRow[]|null $rows Contains a list of rows. You can have a total of 10 rows across your sections. Each row must have a title (Maximum length: 24 characters) and an ID (Maximum length: 200 characters). You can add a description (Maximum length: 72 characters), but it is optional.
     *
     * @return self
     */
    public function setRows($rows)
    {

        if (!is_null($rows) && (count($rows) > 10)) {
            throw new \InvalidArgumentException('invalid value for $rows when calling WhatsappMessageInteractiveActionSection., number of items must be less than or equal to 10.');
        }
        $this->container['rows'] = $rows;

        return $this;
    }

    /**
     * Gets product_items
     *
     * @return \YCloud\Client\Model\WhatsappMessageInteractiveActionSectionProductItem[]|null
     */
    public function getProductItems()
    {
        return $this->container['product_items'];
    }

    /**
     * Sets product_items
     *
     * @param \YCloud\Client\Model\WhatsappMessageInteractiveActionSectionProductItem[]|null $product_items Required for Multi-Product Messages. Array of product objects. There is a minimum of 1 product per section and a maximum of 30 products across all sections.
     *
     * @return self
     */
    public function setProductItems($product_items)
    {

        if (!is_null($product_items) && (count($product_items) > 30)) {
            throw new \InvalidArgumentException('invalid value for $product_items when calling WhatsappMessageInteractiveActionSection., number of items must be less than or equal to 30.');
        }
        if (!is_null($product_items) && (count($product_items) < 1)) {
            throw new \InvalidArgumentException('invalid length for $product_items when calling WhatsappMessageInteractiveActionSection., number of items must be greater than or equal to 1.');
        }
        $this->container['product_items'] = $product_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


