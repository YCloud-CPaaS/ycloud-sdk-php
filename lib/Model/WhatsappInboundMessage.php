<?php
/**
 * WhatsappInboundMessage
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * YCloud API
 *
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YCloud\Client\Model;

use \ArrayAccess;
use \YCloud\Client\ObjectSerializer;

/**
 * WhatsappInboundMessage Class Doc Comment
 *
 * @category Class
 * @description WhatsApp inbound message object.
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WhatsappInboundMessage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WhatsappInboundMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'from' => 'string',
        'to' => 'string',
        'send_time' => '\DateTime',
        'type' => '\YCloud\Client\Model\WhatsappInboundMessageType',
        'text' => '\YCloud\Client\Model\WhatsappInboundMessageText',
        'image' => '\YCloud\Client\Model\WhatsappInboundMessageMedia',
        'video' => '\YCloud\Client\Model\WhatsappInboundMessageMedia',
        'audio' => '\YCloud\Client\Model\WhatsappInboundMessageMedia',
        'document' => '\YCloud\Client\Model\WhatsappInboundMessageMedia',
        'sticker' => '\YCloud\Client\Model\WhatsappInboundMessageMedia',
        'interactive' => '\YCloud\Client\Model\WhatsappInboundMessageInteractive',
        'location' => '\YCloud\Client\Model\WhatsappInboundMessageLocation',
        'button' => '\YCloud\Client\Model\WhatsappInboundMessageButton',
        'contacts' => '\YCloud\Client\Model\WhatsappMessageContact[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'from' => null,
        'to' => null,
        'send_time' => 'date-time',
        'type' => null,
        'text' => null,
        'image' => null,
        'video' => null,
        'audio' => null,
        'document' => null,
        'sticker' => null,
        'interactive' => null,
        'location' => null,
        'button' => null,
        'contacts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'from' => 'from',
        'to' => 'to',
        'send_time' => 'sendTime',
        'type' => 'type',
        'text' => 'text',
        'image' => 'image',
        'video' => 'video',
        'audio' => 'audio',
        'document' => 'document',
        'sticker' => 'sticker',
        'interactive' => 'interactive',
        'location' => 'location',
        'button' => 'button',
        'contacts' => 'contacts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'from' => 'setFrom',
        'to' => 'setTo',
        'send_time' => 'setSendTime',
        'type' => 'setType',
        'text' => 'setText',
        'image' => 'setImage',
        'video' => 'setVideo',
        'audio' => 'setAudio',
        'document' => 'setDocument',
        'sticker' => 'setSticker',
        'interactive' => 'setInteractive',
        'location' => 'setLocation',
        'button' => 'setButton',
        'contacts' => 'setContacts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'from' => 'getFrom',
        'to' => 'getTo',
        'send_time' => 'getSendTime',
        'type' => 'getType',
        'text' => 'getText',
        'image' => 'getImage',
        'video' => 'getVideo',
        'audio' => 'getAudio',
        'document' => 'getDocument',
        'sticker' => 'getSticker',
        'interactive' => 'getInteractive',
        'location' => 'getLocation',
        'button' => 'getButton',
        'contacts' => 'getContacts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['from'] = $data['from'] ?? null;
        $this->container['to'] = $data['to'] ?? null;
        $this->container['send_time'] = $data['send_time'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['text'] = $data['text'] ?? null;
        $this->container['image'] = $data['image'] ?? null;
        $this->container['video'] = $data['video'] ?? null;
        $this->container['audio'] = $data['audio'] ?? null;
        $this->container['document'] = $data['document'] ?? null;
        $this->container['sticker'] = $data['sticker'] ?? null;
        $this->container['interactive'] = $data['interactive'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['button'] = $data['button'] ?? null;
        $this->container['contacts'] = $data['contacts'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique ID for the object.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string|null $from The sender's phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.
     *
     * @return self
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string|null $to The recipient's phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.
     *
     * @return self
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets send_time
     *
     * @return \DateTime|null
     */
    public function getSendTime()
    {
        return $this->container['send_time'];
    }

    /**
     * Sets send_time
     *
     * @param \DateTime|null $send_time The time at which this message is sent, formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339). e.g., `2022-06-01T12:00:00.000Z`.
     *
     * @return self
     */
    public function setSendTime($send_time)
    {
        $this->container['send_time'] = $send_time;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \YCloud\Client\Model\WhatsappInboundMessageType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \YCloud\Client\Model\WhatsappInboundMessageType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets text
     *
     * @return \YCloud\Client\Model\WhatsappInboundMessageText|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param \YCloud\Client\Model\WhatsappInboundMessageText|null $text text
     *
     * @return self
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \YCloud\Client\Model\WhatsappInboundMessageMedia|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \YCloud\Client\Model\WhatsappInboundMessageMedia|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets video
     *
     * @return \YCloud\Client\Model\WhatsappInboundMessageMedia|null
     */
    public function getVideo()
    {
        return $this->container['video'];
    }

    /**
     * Sets video
     *
     * @param \YCloud\Client\Model\WhatsappInboundMessageMedia|null $video video
     *
     * @return self
     */
    public function setVideo($video)
    {
        $this->container['video'] = $video;

        return $this;
    }

    /**
     * Gets audio
     *
     * @return \YCloud\Client\Model\WhatsappInboundMessageMedia|null
     */
    public function getAudio()
    {
        return $this->container['audio'];
    }

    /**
     * Sets audio
     *
     * @param \YCloud\Client\Model\WhatsappInboundMessageMedia|null $audio audio
     *
     * @return self
     */
    public function setAudio($audio)
    {
        $this->container['audio'] = $audio;

        return $this;
    }

    /**
     * Gets document
     *
     * @return \YCloud\Client\Model\WhatsappInboundMessageMedia|null
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param \YCloud\Client\Model\WhatsappInboundMessageMedia|null $document document
     *
     * @return self
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets sticker
     *
     * @return \YCloud\Client\Model\WhatsappInboundMessageMedia|null
     */
    public function getSticker()
    {
        return $this->container['sticker'];
    }

    /**
     * Sets sticker
     *
     * @param \YCloud\Client\Model\WhatsappInboundMessageMedia|null $sticker sticker
     *
     * @return self
     */
    public function setSticker($sticker)
    {
        $this->container['sticker'] = $sticker;

        return $this;
    }

    /**
     * Gets interactive
     *
     * @return \YCloud\Client\Model\WhatsappInboundMessageInteractive|null
     */
    public function getInteractive()
    {
        return $this->container['interactive'];
    }

    /**
     * Sets interactive
     *
     * @param \YCloud\Client\Model\WhatsappInboundMessageInteractive|null $interactive interactive
     *
     * @return self
     */
    public function setInteractive($interactive)
    {
        $this->container['interactive'] = $interactive;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \YCloud\Client\Model\WhatsappInboundMessageLocation|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \YCloud\Client\Model\WhatsappInboundMessageLocation|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets button
     *
     * @return \YCloud\Client\Model\WhatsappInboundMessageButton|null
     */
    public function getButton()
    {
        return $this->container['button'];
    }

    /**
     * Sets button
     *
     * @param \YCloud\Client\Model\WhatsappInboundMessageButton|null $button button
     *
     * @return self
     */
    public function setButton($button)
    {
        $this->container['button'] = $button;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \YCloud\Client\Model\WhatsappMessageContact[]|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \YCloud\Client\Model\WhatsappMessageContact[]|null $contacts contacts
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


