<?php
/**
 * WhatsappTemplatesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * YCloud API
 *
 * The [YCloud](https://ycloud.com) API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer). Our API is designed to have predictable, resource-oriented URLs, return [JSON](https://www.json.org) responses, and use standard HTTP response codes and verbs.
 *
 * The version of the OpenAPI document: v2
 * Contact: service@ycloud.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YCloud\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use YCloud\Client\ApiException;
use YCloud\Client\Configuration;
use YCloud\Client\HeaderSelector;
use YCloud\Client\ObjectSerializer;

/**
 * WhatsappTemplatesApi Class Doc Comment
 *
 * @category Class
 * @package  YCloud\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WhatsappTemplatesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation create
     *
     * Create a WhatsApp template
     *
     * @param  \YCloud\Client\Model\WhatsappTemplateCreateRequest $whatsapp_template_create_request whatsapp_template_create_request (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YCloud\Client\Model\WhatsappTemplate
     */
    public function create($whatsapp_template_create_request)
    {
        list($response) = $this->createWithHttpInfo($whatsapp_template_create_request);
        return $response;
    }

    /**
     * Operation createWithHttpInfo
     *
     * Create a WhatsApp template
     *
     * @param  \YCloud\Client\Model\WhatsappTemplateCreateRequest $whatsapp_template_create_request (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YCloud\Client\Model\WhatsappTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWithHttpInfo($whatsapp_template_create_request)
    {
        $request = $this->createRequest($whatsapp_template_create_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\YCloud\Client\Model\WhatsappTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\WhatsappTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\WhatsappTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\YCloud\Client\Model\WhatsappTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\WhatsappTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAsync
     *
     * Create a WhatsApp template
     *
     * @param  \YCloud\Client\Model\WhatsappTemplateCreateRequest $whatsapp_template_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAsync($whatsapp_template_create_request)
    {
        return $this->createAsyncWithHttpInfo($whatsapp_template_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAsyncWithHttpInfo
     *
     * Create a WhatsApp template
     *
     * @param  \YCloud\Client\Model\WhatsappTemplateCreateRequest $whatsapp_template_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAsyncWithHttpInfo($whatsapp_template_create_request)
    {
        $returnType = '\YCloud\Client\Model\WhatsappTemplate';
        $request = $this->createRequest($whatsapp_template_create_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'create'
     *
     * @param  \YCloud\Client\Model\WhatsappTemplateCreateRequest $whatsapp_template_create_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRequest($whatsapp_template_create_request)
    {
        // verify the required parameter 'whatsapp_template_create_request' is set
        if ($whatsapp_template_create_request === null || (is_array($whatsapp_template_create_request) && count($whatsapp_template_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $whatsapp_template_create_request when calling create'
            );
        }

        $resourcePath = '/whatsapp/templates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($whatsapp_template_create_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($whatsapp_template_create_request));
            } else {
                $httpBody = $whatsapp_template_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteByName
     *
     * Delete WhatsApp templates by name
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $name Name of the template. (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YCloud\Client\Model\WhatsappTemplate[]|\YCloud\Client\Model\ErrorResponse
     */
    public function deleteByName($waba_id, $name)
    {
        list($response) = $this->deleteByNameWithHttpInfo($waba_id, $name);
        return $response;
    }

    /**
     * Operation deleteByNameWithHttpInfo
     *
     * Delete WhatsApp templates by name
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $name Name of the template. (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YCloud\Client\Model\WhatsappTemplate[]|\YCloud\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteByNameWithHttpInfo($waba_id, $name)
    {
        $request = $this->deleteByNameRequest($waba_id, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\YCloud\Client\Model\WhatsappTemplate[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\WhatsappTemplate[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\WhatsappTemplate[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\YCloud\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\YCloud\Client\Model\WhatsappTemplate[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\WhatsappTemplate[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteByNameAsync
     *
     * Delete WhatsApp templates by name
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $name Name of the template. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteByNameAsync($waba_id, $name)
    {
        return $this->deleteByNameAsyncWithHttpInfo($waba_id, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteByNameAsyncWithHttpInfo
     *
     * Delete WhatsApp templates by name
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $name Name of the template. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteByNameAsyncWithHttpInfo($waba_id, $name)
    {
        $returnType = '\YCloud\Client\Model\WhatsappTemplate[]';
        $request = $this->deleteByNameRequest($waba_id, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteByName'
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $name Name of the template. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteByNameRequest($waba_id, $name)
    {
        // verify the required parameter 'waba_id' is set
        if ($waba_id === null || (is_array($waba_id) && count($waba_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waba_id when calling deleteByName'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling deleteByName'
            );
        }
        if (!preg_match("/[a-z0-9]{1,512}/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling WhatsappTemplatesApi.deleteByName, must conform to the pattern /[a-z0-9]{1,512}/.");
        }


        $resourcePath = '/whatsapp/templates/{wabaId}/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($waba_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wabaId' . '}',
                ObjectSerializer::toPathValue($waba_id),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteByNameAndLanguage
     *
     * Delete a WhatsApp template
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $name Name of the template. (required)
     * @param  string $language Language code of the template. See [Supported Languages](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#supported-languages) for all codes. (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YCloud\Client\Model\WhatsappTemplate|\YCloud\Client\Model\ErrorResponse
     */
    public function deleteByNameAndLanguage($waba_id, $name, $language)
    {
        list($response) = $this->deleteByNameAndLanguageWithHttpInfo($waba_id, $name, $language);
        return $response;
    }

    /**
     * Operation deleteByNameAndLanguageWithHttpInfo
     *
     * Delete a WhatsApp template
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $name Name of the template. (required)
     * @param  string $language Language code of the template. See [Supported Languages](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#supported-languages) for all codes. (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YCloud\Client\Model\WhatsappTemplate|\YCloud\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteByNameAndLanguageWithHttpInfo($waba_id, $name, $language)
    {
        $request = $this->deleteByNameAndLanguageRequest($waba_id, $name, $language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\YCloud\Client\Model\WhatsappTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\WhatsappTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\WhatsappTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\YCloud\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\YCloud\Client\Model\WhatsappTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\WhatsappTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteByNameAndLanguageAsync
     *
     * Delete a WhatsApp template
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $name Name of the template. (required)
     * @param  string $language Language code of the template. See [Supported Languages](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#supported-languages) for all codes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteByNameAndLanguageAsync($waba_id, $name, $language)
    {
        return $this->deleteByNameAndLanguageAsyncWithHttpInfo($waba_id, $name, $language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteByNameAndLanguageAsyncWithHttpInfo
     *
     * Delete a WhatsApp template
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $name Name of the template. (required)
     * @param  string $language Language code of the template. See [Supported Languages](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#supported-languages) for all codes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteByNameAndLanguageAsyncWithHttpInfo($waba_id, $name, $language)
    {
        $returnType = '\YCloud\Client\Model\WhatsappTemplate';
        $request = $this->deleteByNameAndLanguageRequest($waba_id, $name, $language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteByNameAndLanguage'
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $name Name of the template. (required)
     * @param  string $language Language code of the template. See [Supported Languages](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#supported-languages) for all codes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteByNameAndLanguageRequest($waba_id, $name, $language)
    {
        // verify the required parameter 'waba_id' is set
        if ($waba_id === null || (is_array($waba_id) && count($waba_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waba_id when calling deleteByNameAndLanguage'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling deleteByNameAndLanguage'
            );
        }
        if (!preg_match("/[a-z0-9]{1,512}/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling WhatsappTemplatesApi.deleteByNameAndLanguage, must conform to the pattern /[a-z0-9]{1,512}/.");
        }

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling deleteByNameAndLanguage'
            );
        }

        $resourcePath = '/whatsapp/templates/{wabaId}/{name}/{language}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($waba_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wabaId' . '}',
                ObjectSerializer::toPathValue($waba_id),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editByNameAndLanguage
     *
     * Edit a WhatsApp template
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $name Name of the template. (required)
     * @param  string $language Language code of the template. See [Supported Languages](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#supported-languages) for all codes. (required)
     * @param  \YCloud\Client\Model\WhatsappTemplateEditRequest $whatsapp_template_edit_request whatsapp_template_edit_request (optional)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YCloud\Client\Model\WhatsappTemplate|\YCloud\Client\Model\ErrorResponse
     */
    public function editByNameAndLanguage($waba_id, $name, $language, $whatsapp_template_edit_request = null)
    {
        list($response) = $this->editByNameAndLanguageWithHttpInfo($waba_id, $name, $language, $whatsapp_template_edit_request);
        return $response;
    }

    /**
     * Operation editByNameAndLanguageWithHttpInfo
     *
     * Edit a WhatsApp template
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $name Name of the template. (required)
     * @param  string $language Language code of the template. See [Supported Languages](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#supported-languages) for all codes. (required)
     * @param  \YCloud\Client\Model\WhatsappTemplateEditRequest $whatsapp_template_edit_request (optional)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YCloud\Client\Model\WhatsappTemplate|\YCloud\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function editByNameAndLanguageWithHttpInfo($waba_id, $name, $language, $whatsapp_template_edit_request = null)
    {
        $request = $this->editByNameAndLanguageRequest($waba_id, $name, $language, $whatsapp_template_edit_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\YCloud\Client\Model\WhatsappTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\WhatsappTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\WhatsappTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\YCloud\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\YCloud\Client\Model\WhatsappTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\WhatsappTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editByNameAndLanguageAsync
     *
     * Edit a WhatsApp template
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $name Name of the template. (required)
     * @param  string $language Language code of the template. See [Supported Languages](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#supported-languages) for all codes. (required)
     * @param  \YCloud\Client\Model\WhatsappTemplateEditRequest $whatsapp_template_edit_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editByNameAndLanguageAsync($waba_id, $name, $language, $whatsapp_template_edit_request = null)
    {
        return $this->editByNameAndLanguageAsyncWithHttpInfo($waba_id, $name, $language, $whatsapp_template_edit_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editByNameAndLanguageAsyncWithHttpInfo
     *
     * Edit a WhatsApp template
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $name Name of the template. (required)
     * @param  string $language Language code of the template. See [Supported Languages](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#supported-languages) for all codes. (required)
     * @param  \YCloud\Client\Model\WhatsappTemplateEditRequest $whatsapp_template_edit_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editByNameAndLanguageAsyncWithHttpInfo($waba_id, $name, $language, $whatsapp_template_edit_request = null)
    {
        $returnType = '\YCloud\Client\Model\WhatsappTemplate';
        $request = $this->editByNameAndLanguageRequest($waba_id, $name, $language, $whatsapp_template_edit_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editByNameAndLanguage'
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $name Name of the template. (required)
     * @param  string $language Language code of the template. See [Supported Languages](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#supported-languages) for all codes. (required)
     * @param  \YCloud\Client\Model\WhatsappTemplateEditRequest $whatsapp_template_edit_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function editByNameAndLanguageRequest($waba_id, $name, $language, $whatsapp_template_edit_request = null)
    {
        // verify the required parameter 'waba_id' is set
        if ($waba_id === null || (is_array($waba_id) && count($waba_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waba_id when calling editByNameAndLanguage'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling editByNameAndLanguage'
            );
        }
        if (!preg_match("/[a-z0-9]{1,512}/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling WhatsappTemplatesApi.editByNameAndLanguage, must conform to the pattern /[a-z0-9]{1,512}/.");
        }

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling editByNameAndLanguage'
            );
        }

        $resourcePath = '/whatsapp/templates/{wabaId}/{name}/{language}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($waba_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wabaId' . '}',
                ObjectSerializer::toPathValue($waba_id),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($whatsapp_template_edit_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($whatsapp_template_edit_request));
            } else {
                $httpBody = $whatsapp_template_edit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation list
     *
     * List WhatsApp templates
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page Page number of the results to be returned, 1-based. (optional, default to 1)
     * @param  int $limit A limit on the number of results to be returned, or number of results per page, between 1 and 100, defaults to 10. (optional, default to 10)
     * @param  bool $include_total Return results inside an object that contains the total result count or not. (optional, default to false)
     * @param  string $filter_waba_id WhatsApp Business Account ID. (optional)
     * @param  string $filter_name Name of the template. (optional)
     * @param  string $filter_language Language of the template. (optional)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YCloud\Client\Model\WhatsappTemplatePage
     */
    public function list($associative_array)
    {
        list($response) = $this->listWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation listWithHttpInfo
     *
     * List WhatsApp templates
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page Page number of the results to be returned, 1-based. (optional, default to 1)
     * @param  int $limit A limit on the number of results to be returned, or number of results per page, between 1 and 100, defaults to 10. (optional, default to 10)
     * @param  bool $include_total Return results inside an object that contains the total result count or not. (optional, default to false)
     * @param  string $filter_waba_id WhatsApp Business Account ID. (optional)
     * @param  string $filter_name Name of the template. (optional)
     * @param  string $filter_language Language of the template. (optional)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YCloud\Client\Model\WhatsappTemplatePage, HTTP status code, HTTP response headers (array of strings)
     */
    public function listWithHttpInfo($associative_array)
    {
        $request = $this->listRequest($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\YCloud\Client\Model\WhatsappTemplatePage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\WhatsappTemplatePage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\WhatsappTemplatePage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\YCloud\Client\Model\WhatsappTemplatePage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\WhatsappTemplatePage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAsync
     *
     * List WhatsApp templates
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page Page number of the results to be returned, 1-based. (optional, default to 1)
     * @param  int $limit A limit on the number of results to be returned, or number of results per page, between 1 and 100, defaults to 10. (optional, default to 10)
     * @param  bool $include_total Return results inside an object that contains the total result count or not. (optional, default to false)
     * @param  string $filter_waba_id WhatsApp Business Account ID. (optional)
     * @param  string $filter_name Name of the template. (optional)
     * @param  string $filter_language Language of the template. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAsync($associative_array)
    {
        return $this->listAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAsyncWithHttpInfo
     *
     * List WhatsApp templates
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page Page number of the results to be returned, 1-based. (optional, default to 1)
     * @param  int $limit A limit on the number of results to be returned, or number of results per page, between 1 and 100, defaults to 10. (optional, default to 10)
     * @param  bool $include_total Return results inside an object that contains the total result count or not. (optional, default to false)
     * @param  string $filter_waba_id WhatsApp Business Account ID. (optional)
     * @param  string $filter_name Name of the template. (optional)
     * @param  string $filter_language Language of the template. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\YCloud\Client\Model\WhatsappTemplatePage';
        $request = $this->listRequest($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'list'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  int $page Page number of the results to be returned, 1-based. (optional, default to 1)
     * @param  int $limit A limit on the number of results to be returned, or number of results per page, between 1 and 100, defaults to 10. (optional, default to 10)
     * @param  bool $include_total Return results inside an object that contains the total result count or not. (optional, default to false)
     * @param  string $filter_waba_id WhatsApp Business Account ID. (optional)
     * @param  string $filter_name Name of the template. (optional)
     * @param  string $filter_language Language of the template. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $page = array_key_exists('page', $associative_array) ? $associative_array['page'] : 1;
        $limit = array_key_exists('limit', $associative_array) ? $associative_array['limit'] : 10;
        $include_total = array_key_exists('include_total', $associative_array) ? $associative_array['include_total'] : false;
        $filter_waba_id = array_key_exists('filter_waba_id', $associative_array) ? $associative_array['filter_waba_id'] : null;
        $filter_name = array_key_exists('filter_name', $associative_array) ? $associative_array['filter_name'] : null;
        $filter_language = array_key_exists('filter_language', $associative_array) ? $associative_array['filter_language'] : null;

        if ($page !== null && $page > 100) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling WhatsappTemplatesApi.list, must be smaller than or equal to 100.');
        }
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling WhatsappTemplatesApi.list, must be bigger than or equal to 1.');
        }

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WhatsappTemplatesApi.list, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WhatsappTemplatesApi.list, must be bigger than or equal to 1.');
        }

        if ($filter_name !== null && strlen($filter_name) > 512) {
            throw new \InvalidArgumentException('invalid length for "$filter_name" when calling WhatsappTemplatesApi.list, must be smaller than or equal to 512.');
        }
        if ($filter_name !== null && !preg_match("/[a-z0-9]{1,512}/", $filter_name)) {
            throw new \InvalidArgumentException("invalid value for \"filter_name\" when calling WhatsappTemplatesApi.list, must conform to the pattern /[a-z0-9]{1,512}/.");
        }


        $resourcePath = '/whatsapp/templates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_total,
            'includeTotal', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_waba_id,
            'filter.wabaId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_name,
            'filter.name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_language,
            'filter.language', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveByNameAndLanguage
     *
     * Retrieve a WhatsApp template
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $name Name of the template. (required)
     * @param  string $language Language code of the template. See [Supported Languages](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#supported-languages) for all codes. (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YCloud\Client\Model\WhatsappTemplate|\YCloud\Client\Model\ErrorResponse
     */
    public function retrieveByNameAndLanguage($waba_id, $name, $language)
    {
        list($response) = $this->retrieveByNameAndLanguageWithHttpInfo($waba_id, $name, $language);
        return $response;
    }

    /**
     * Operation retrieveByNameAndLanguageWithHttpInfo
     *
     * Retrieve a WhatsApp template
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $name Name of the template. (required)
     * @param  string $language Language code of the template. See [Supported Languages](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#supported-languages) for all codes. (required)
     *
     * @throws \YCloud\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YCloud\Client\Model\WhatsappTemplate|\YCloud\Client\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveByNameAndLanguageWithHttpInfo($waba_id, $name, $language)
    {
        $request = $this->retrieveByNameAndLanguageRequest($waba_id, $name, $language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\YCloud\Client\Model\WhatsappTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\WhatsappTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\WhatsappTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\YCloud\Client\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\YCloud\Client\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\YCloud\Client\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\YCloud\Client\Model\WhatsappTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\WhatsappTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YCloud\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveByNameAndLanguageAsync
     *
     * Retrieve a WhatsApp template
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $name Name of the template. (required)
     * @param  string $language Language code of the template. See [Supported Languages](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#supported-languages) for all codes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveByNameAndLanguageAsync($waba_id, $name, $language)
    {
        return $this->retrieveByNameAndLanguageAsyncWithHttpInfo($waba_id, $name, $language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveByNameAndLanguageAsyncWithHttpInfo
     *
     * Retrieve a WhatsApp template
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $name Name of the template. (required)
     * @param  string $language Language code of the template. See [Supported Languages](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#supported-languages) for all codes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveByNameAndLanguageAsyncWithHttpInfo($waba_id, $name, $language)
    {
        $returnType = '\YCloud\Client\Model\WhatsappTemplate';
        $request = $this->retrieveByNameAndLanguageRequest($waba_id, $name, $language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveByNameAndLanguage'
     *
     * @param  string $waba_id WhatsApp Business Account ID. (required)
     * @param  string $name Name of the template. (required)
     * @param  string $language Language code of the template. See [Supported Languages](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates#supported-languages) for all codes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retrieveByNameAndLanguageRequest($waba_id, $name, $language)
    {
        // verify the required parameter 'waba_id' is set
        if ($waba_id === null || (is_array($waba_id) && count($waba_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $waba_id when calling retrieveByNameAndLanguage'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling retrieveByNameAndLanguage'
            );
        }
        if (!preg_match("/[a-z0-9]{1,512}/", $name)) {
            throw new \InvalidArgumentException("invalid value for \"name\" when calling WhatsappTemplatesApi.retrieveByNameAndLanguage, must conform to the pattern /[a-z0-9]{1,512}/.");
        }

        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling retrieveByNameAndLanguage'
            );
        }

        $resourcePath = '/whatsapp/templates/{wabaId}/{name}/{language}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($waba_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wabaId' . '}',
                ObjectSerializer::toPathValue($waba_id),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
